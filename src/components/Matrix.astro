---
type Props = {
    delay: number;
};
const { delay } = Astro.props;
---

<style>
    body,
    html {
        margin: 0;
        padding: 0;
        height: 100%; /* Full height */
        background: var(--background);
    }

    .matrix-effect {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 2;
        pointer-events: none;
        overflow: hidden; /* Prevents scrolling within the effect container */
    }
</style>

<div id="matrixEffect" class="matrix-effect" fade-out={delay}></div>
<script>
    (() => {
        "use strict";
        let blinkInterval: number | undefined,
            matrixInterval: number | undefined,
            lineInterval: number | undefined;
        let isResizing = false;

        /**
         * Safely read the 'fade-out' attribute from the #matrixEffect element
         * @returns {number} Parsed timeout value (0 if invalid or missing)
         */
        const getTimeoutValue = (element: HTMLElement): number => {
            if (!element) {
                console.warn(
                    "Matrix effect element not found to read 'fade-out' attribute.",
                );
                return 0;
            }

            const fadeOutAttr = element.getAttribute("fade-out");
            if (!fadeOutAttr) {
                console.warn(
                    "'fade-out' attribute not found on #matrixEffect element.",
                );
                return 0;
            }

            const parsed = parseInt(fadeOutAttr, 10);
            if (isNaN(parsed)) {
                console.warn(
                    `Invalid 'fade-out' attribute value: ${fadeOutAttr}`,
                );
                return 0;
            }
            return parsed;
        };

        /**
         * Creates a canvas element inside the given parent and returns the context.
         * @returns {{ canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D | null} | null}
         */
        const createCanvasAndContext = (parent: HTMLElement) => {
            if (!parent) {
                console.warn(
                    "Parent element is null or undefined. Cannot create canvas.",
                );
                return null;
            }

            // Remove existing canvas if present
            const existingCanvas = parent.querySelector("canvas");
            if (existingCanvas) {
                parent.removeChild(existingCanvas);
            }

            const canvas = document.createElement("canvas");
            parent.appendChild(canvas);
            const ctx = canvas.getContext("2d");

            if (!ctx) {
                console.warn(
                    "Unable to get 2D context from the created canvas.",
                );
            }
            return { canvas, ctx };
        };

        /**
         * Draws the falling characters.
         */
        const drawMatrix = (
            ctx: CanvasRenderingContext2D,
            canvas: HTMLCanvasElement,
            columns: number,
            drops: number[],
            fontSize: number,
            matrixChars: string[],
        ) => {
            ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = "#0F0";
            ctx.font = `${fontSize}px monospace`;
            for (let i = 0; i < columns; i++) {
                const text =
                    matrixChars[Math.floor(Math.random() * matrixChars.length)];
                ctx.fillText(text, i * fontSize, drops[i] * fontSize);
                if (
                    drops[i] * fontSize > canvas.height &&
                    Math.random() > 0.975
                ) {
                    drops[i] = 0;
                } else {
                    drops[i]++;
                }
            }
        };

        /**
         * Adds a random horizontal "distortion" line.
         */
        const addDistortionLine = (
            ctx: CanvasRenderingContext2D,
            canvas: HTMLCanvasElement,
        ) => {
            ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
            const yPosition = Math.floor(Math.random() * canvas.height);
            const lineThickness = Math.random() * 10 + 1;
            ctx.fillRect(0, yPosition, canvas.width, lineThickness);
        };

        /**
         * Handles the "blink" and fade-out effect at the end.
         */
        const handleFadeOut = (
            element: HTMLElement,
            timeout: number | undefined,
            addLinesFn: () => void,
        ) => {
            if (!element || (timeout !== undefined && timeout <= 0)) {
                return;
            }
            setTimeout(
                () => {
                    const blinkInterval = setInterval(() => {
                        element.style.opacity =
                            element.style.opacity === "1" ? "0.1" : "1";
                    }, 30);

                    const extraLinesInterval = setInterval(() => {
                        for (let i = 0; i < 5; i++) {
                            addLinesFn();
                        }
                    }, 40);

                    setTimeout(
                        () => {
                            clearInterval(blinkInterval);
                            clearInterval(extraLinesInterval);
                            element.style.opacity = "1";
                            element.style.display = "none";
                        },
                        100, // Stops blinking after 100ms
                    );
                },
                (timeout || 0) - (timeout || 0) / 10,
            );

            setTimeout(() => {
                element.style.display = "none";
            }, timeout);
        };

        /**
         * Initializes the Matrix effect (creates canvas, sets up intervals).
         */
        const initMatrixEffect = () => {
            const matrixEffectElement = document.getElementById("matrixEffect");
            if (!matrixEffectElement) {
                console.warn(
                    "#matrixEffect element not found in the DOM. Skipping Matrix effect initialization.",
                );
                return;
            }

            // Clear previous intervals if any
            clearInterval(matrixInterval);
            clearInterval(lineInterval);

            const timeout = getTimeoutValue(matrixEffectElement);
            const result = createCanvasAndContext(matrixEffectElement);
            if (!result || !result.canvas || !result.ctx) {
                return;
            }

            const { canvas, ctx } = result;
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;

            const fontSize = 16;
            const columns = Math.floor(canvas.width / fontSize);
            const drops = new Array(columns)
                .fill(0)
                .map(() =>
                    Math.floor((Math.random() * -canvas.height) / fontSize),
                );

            const matrixChars =
                "ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()+-/<>:;".split(
                    "",
                );
            // Start the matrix and distortion line intervals
            matrixInterval = setInterval(
                () =>
                    drawMatrix(
                        ctx,
                        canvas,
                        columns,
                        drops,
                        fontSize,
                        matrixChars,
                    ),
                50,
            );
            lineInterval = setInterval(
                () => addDistortionLine(ctx, canvas),
                200,
            );

            const handleResize = (
                matrixEffectElement: HTMLElement,
                _fontSize: number,
                _matrixChars: string[],
            ) => {
                if (isResizing) return; // Prevent multiple simultaneous resize handlers
                isResizing = true;

                // Start fast blinking effect during resize
                blinkInterval = setInterval(() => {
                    matrixEffectElement.style.opacity =
                        matrixEffectElement.style.opacity === "1" ? "0.1" : "1";
                }, 1);

                // Delay the reinitialization to allow resize to settle
                setTimeout(() => {
                    clearInterval(blinkInterval); // Stop blinking effect
                    matrixEffectElement.style.opacity = "1"; // Reset opacity

                    initMatrixEffect(); // Reinitialize the matrix effect
                    isResizing = false; // Reset resizing flag
                }, 300); // Adjust this delay based on user preference
            };

            // Add resize event listener
            window.addEventListener("resize", () =>
                handleResize(matrixEffectElement, fontSize, matrixChars),
            );

            if (typeof setInterval === "function") {
                setInterval(
                    () =>
                        drawMatrix(
                            ctx,
                            canvas,
                            columns,
                            drops,
                            fontSize,
                            matrixChars,
                        ),
                    50,
                );
                setInterval(() => addDistortionLine(ctx, canvas), 200);
            } else {
                console.warn(
                    "setInterval is not available. Animations cannot be started.",
                );
            }
            handleFadeOut(matrixEffectElement, timeout || 0, () =>
                addDistortionLine(ctx, canvas),
            );
        };

        /**
         * Main entry point when DOM is loaded.
         */
        const onDomContentLoaded = () => {
            if (typeof document === "undefined") {
                console.warn(
                    "document is not available, cannot initialize Matrix effect.",
                );
                return;
            }
            initMatrixEffect();
        };

        if (typeof document !== "undefined") {
            document.addEventListener("DOMContentLoaded", onDomContentLoaded);
        } else {
            console.warn(
                "document is not defined. Skipping DOMContentLoaded listener.",
            );
        }
    })();
</script>
