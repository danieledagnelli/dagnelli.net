Project Path: src

Source Tree:

```
src
├── pages
│   ├── gol.html
│   ├── resume.astro
│   ├── testMatrix.astro
│   ├── index.astro
│   ├── map.html
│   ├── bio.astro
│   ├── contact.astro
│   ├── home.astro
│   └── blog.astro
├── siteMetadata.js
├── layouts
│   ├── Main.astro
│   ├── About.astro
│   └── Blog.astro
├── components
│   ├── Navigation.astro
│   ├── LastChanged.astro
│   ├── MatrixBeta.astro
│   ├── ContactSidebar.astro
│   ├── Footer.astro
│   ├── Header.astro
│   ├── DynamicContent.astro
│   ├── ThemeToggler.astro
│   ├── Whoami.astro
│   └── Loading.astro
└── styles
    ├── global.css
    └── business.css.delete

```

`/workspaces/danieledagnelli.github.io/src/pages/resume.astro`:

```astro
---
import Main from "../layouts/Main.astro";
import { siteMetadata } from "../siteMetadata";
---

<Main title={`${siteMetadata.title} → resume`} last_modified="1733673113">
    <div class="center">
        <p>
            <a href="https://www.linkedin.com/in/dagnelli/"
                >linkedin.com/in/dagnelli</a
            ><br />
            London, United Kingdom
        </p>
    </div>
    <h3 id="summary">Summary</h3>
    <div class="itemize">
        <p>
            <span
                >Senior Engagement Manager with 12+ years in Professional
                Services, leading high-impact digital transformations that drive
                revenue growth and cost efficiency. Experienced in delivering AI
                solutions for complex challenges across Manufacturing,
                Healthcare, Oil&amp;Gas, Telecom, and Financial Services sectors
                for global enterprises. Skilled in aligning cross-functional
                teams and collaborating with senior leadership on programs
                exceeding $15M, consistently exceeding metrics in adoption,
                customer satisfaction (NPS), and operational efficiency. Known
                for building trust-based client relationships and adept at
                navigating ambiguity. Technically proficient with expertise in
                software engineering, solution architecture, cloud engineering,
                and advanced machine learning, including LLMs and Generative AI.</span
            >
        </p>
    </div>
    <h1 id="experience">Experience</h1>
    <ul>
        <li>
            <table>
                <tbody>
                    <tr class="odd">
                        <td style="text-align: left;"><strong>C3 AI</strong></td
                        >
                        <td style="text-align: right;"
                            >London, United Kingdom</td
                        >
                    </tr>
                    <tr class="even">
                        <td style="text-align: left;"
                            ><strong><em>Senior Engagement Manager</em></strong
                            ></td
                        >
                        <td style="text-align: right;"
                            ><em>June 2024 – Present</em></td
                        >
                    </tr>
                </tbody>
            </table>
            <p>
                <span
                    >Responsible for the rollout and adoption of an AI-enabled
                    Predictive Maintenance application for a Swiss building
                    materials manufacturer, spanning over 100 plants, 2,000+ end
                    users, and a total contract value exceeding $10M.</span
                >
            </p>
            <div class="experience-item">
                <ul>
                    <li>
                        Partnered with cross-functional teams, including Product
                        and Sales, to craft value-driven use cases, translating
                        them into technical and functional requirements,
                        detailed specifications, and actionable project plans.
                    </li>
                    <li>
                        Expanded relationships by identifying new use cases and
                        incremental staffing needs.
                    </li>
                    <li>
                        Defined scope, requirements, timelines, and success
                        metrics for projects, emphasizing customer
                        self-sufficiency on the platform.
                    </li>
                    <li>
                        Led project governance activities, including project
                        planning, weekly reviews, cross-functional meetings, and
                        executive status reports, ensuring alignment and
                        transparency throughout project lifecycles.
                    </li>
                    <li>
                        Directed all implementation activities, supervising
                        teams across Application Development, Data Integration,
                        Data Science, QA, and DevOps to ensure timely and
                        successful delivery.
                    </li>
                    <li>
                        Established trusted advisor relationships with clients,
                        tracking and mitigating risks to maintain high customer
                        satisfaction (CSAT) consistently achieving NPS Score
                        >70.
                    </li>
                    <li>
                        Played a key role in recruiting and attracting top
                        talent to build a strong, client-focused services team.
                    </li>
                </ul>
            </div>
        </li>
        <li>
            <table>
                <tbody>
                    <tr class="odd">
                        <td style="text-align: left;"><strong></strong></td>
                        <td style="text-align: right;"></td>
                    </tr>
                    <tr class="even">
                        <td style="text-align: left;"
                            ><strong><em>Engagement Manager</em></strong></td
                        >
                        <td style="text-align: right;"
                            ><em>August 2021 – May 2024</em></td
                        >
                    </tr>
                </tbody>
            </table>
            <ul>
                <li>
                    <p>
                        <span
                            >Led strategic initiatives across all Business Units
                            and Partners, managing program with a $15M budget
                            and reporting directly to the VP of Customer
                            Services.</span
                        >
                    </p>
                </li>
            </ul>
        </li>
        <li>
            <table>
                <tbody>
                    <tr class="odd">
                        <td style="text-align: left;"
                            ><strong>Deloitte</strong></td
                        >
                        <td style="text-align: right;"
                            >London, United Kingdom</td
                        >
                    </tr>
                    <tr class="even">
                        <td style="text-align: left;"
                            ><strong><em>Manager</em></strong></td
                        >
                        <td style="text-align: right;"
                            ><em>October 2018 – July 2021</em></td
                        >
                    </tr>
                </tbody>
            </table>
            <ul>
                <li>
                    <p>
                        <span
                            >Grew Deloitte UK’s Anaplan practice from inception
                            to 25+ practitioners, leading the first
                            enterprise-wide deployment for a large British
                            telco.</span
                        >
                    </p>
                </li>
            </ul>
        </li>
        <li>
            <table>
                <tbody>
                    <tr class="odd">
                        <td style="text-align: left;"
                            ><strong>Accenture</strong></td
                        >
                        <td style="text-align: right;"
                            >London, United Kingdom</td
                        >
                    </tr>
                    <tr class="even">
                        <td style="text-align: left;"
                            ><strong><em>Management Consultant</em></strong></td
                        >
                        <td style="text-align: right;"
                            ><em>April 2017 – September 2018</em></td
                        >
                    </tr>
                </tbody>
            </table>
        </li>
        <li>
            <table>
                <tbody>
                    <tr class="odd">
                        <td style="text-align: left;"><strong>Codec</strong></td
                        >
                        <td style="text-align: right;">Dublin, Ireland</td>
                    </tr>
                    <tr class="even">
                        <td style="text-align: left;"
                            ><strong><em>Consultant</em></strong></td
                        >
                        <td style="text-align: right;"
                            ><em>January 2015 – March 2017</em></td
                        >
                    </tr>
                </tbody>
            </table>
        </li>
        <li>
            <table>
                <tbody>
                    <tr class="odd">
                        <td style="text-align: left;"
                            ><strong>Accenture</strong></td
                        >
                        <td style="text-align: right;">Milan, Italy</td>
                    </tr>
                    <tr class="even">
                        <td style="text-align: left;"
                            ><strong><em>Software Engineer</em></strong></td
                        >
                        <td style="text-align: right;"
                            ><em>April 2012 – December 2014</em></td
                        >
                    </tr>
                </tbody>
            </table>
        </li>
    </ul>
    <h1 id="education">Education</h1>
    <ul>
        <li>
            <table>
                <tbody>
                    <tr class="odd">
                        <td style="text-align: left;"
                            ><strong>Abertay University</strong></td
                        >
                        <td style="text-align: right;">Dundee, UK</td>
                    </tr>
                    <tr class="even">
                        <td style="text-align: left;"
                            ><strong
                                ><em
                                    >MSc Ethical Hacking and Cybersecurity
                                    (Distinction)</em
                                ></strong
                            ></td
                        >
                        <td style="text-align: right;"><em>2021 – 2023</em></td>
                    </tr>
                </tbody>
            </table>
        </li>
        <li>
            <table>
                <tbody>
                    <tr class="odd">
                        <td style="text-align: left;"
                            ><strong>University of Bari Aldo Moro</strong></td
                        >
                        <td style="text-align: right;">Bari, Italy</td>
                    </tr>
                    <tr class="even">
                        <td style="text-align: left;"
                            ><strong><em>BSc Computer Science</em></strong></td
                        >
                        <td style="text-align: right;"><em>2005 – 2011</em></td>
                    </tr>
                </tbody>
            </table>
        </li>
    </ul>
    <h1 id="skills">Skills</h1>
    <div class="itemize">
        <p>
            <span>
                <strong>Certifications</strong><span
                    >: Prince2 Practitioner</span
                ><br />
                <strong>Languages</strong><span
                    >: Fluent in English and Italian (native)</span
                >
            </span>
        </p>
    </div>
</Main>

<style>
    code {
        white-space: pre-wrap;
    }
    span.smallcaps {
        font-variant: small-caps;
    }
    div.columns {
        display: flex;
        gap: min(4vw, 1.5em);
    }
    div.column {
        flex: auto;
        overflow-x: auto;
    }
    div.hanging-indent {
        margin-left: 1.5em;
        text-indent: -1.5em;
    }
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class] {
        list-style: none;
    }
    ul.task-list li input[type="checkbox"] {
        font-size: inherit;
        width: 0.8em;
        margin: 0 0.8em 0.2em -1.6em;
        vertical-align: middle;
    }

    



    /* Centered contact info styling */
    .center {
        text-align: center;
        font-size: 14px;
        margin-bottom: 20px;
    }

    /* Section styling */
    .section {
        margin-top: 20px;
    }

    /* Remove bullets for most lists */
    ul {
        list-style-type: none;
        padding-left: 0;
        margin: 10px 0;
    }

    /* Apply bullets only to specific experience items */
    .experience-item ul {
        list-style-type: disc;
        padding-left: 20px;
        margin-top: 0;
        margin-bottom: 10px;
        /* color: white; */
    }

    /* Item styling within specific lists */
    .experience-item ul li {
        margin-bottom: 5px;
    }

    /* Table layout for Experience and Education */
    table {
        width: 100%;
        margin-bottom: 20px;
        border-collapse: collapse;
        /* color: white; */
    }

    td {
        /* color: white; */
    }

    td.job-title {
        font-weight: bold;
    }

    td.job-details {
        font-style: italic;
    }

    td.dates {
        text-align: right;
        font-style: italic;
    }
</style>

```

`/workspaces/danieledagnelli.github.io/src/pages/testMatrix.astro`:

```astro
---
import MatrixBeta from '../components/MatrixBeta.astro';
const delay : number = 5000;
---

<MatrixBeta delay={delay} />
```

`/workspaces/danieledagnelli.github.io/src/pages/index.astro`:

```astro
---
import Main from "../layouts/Main.astro";
import { siteMetadata } from "../siteMetadata";
---

<Main title={`${siteMetadata.title} → home`} last_modified="1733673113" />



```

`/workspaces/danieledagnelli.github.io/src/pages/bio.astro`:

```astro
---
import Main from "../layouts/Main.astro";
import { siteMetadata } from "../siteMetadata";
---

<Main title={`${siteMetadata.title} → Bio`} last_modified="1734771487">

</Main>

<style>
    hr {
        border: none; /* Removes default border */
        height: 0.01em; /* Smallest possible line */
        background-color: var(--text-color); /* Green color */
        width: 80%; /* 80% of the container width */
        margin: 0 auto; /* Center the line horizontally */
    }
</style>
```

`/workspaces/danieledagnelli.github.io/src/pages/contact.astro`:

```astro
---
import Main from "../layouts/Main.astro";
import ContactSidebar from "../components/ContactSidebar.astro";
import Whoami from "../components/Whoami.astro";

import { siteMetadata } from "../siteMetadata";
---

<Main title={`${siteMetadata.title} → Contact`} last_modified="1734771487">
    <div class="container">
        <ContactSidebar />
        <Whoami />
        <!-- This is where we'll render the typed command -->
        
</Main>

<style>
    .container {
        display: flex;
        justify-content: left;
        gap: 1em;
        padding: 1em;
        height: calc(100% - 2em);
        min-height: 400px;
    }
</style>

```

`/workspaces/danieledagnelli.github.io/src/pages/home.astro`:

```astro
---
import Main from "../layouts/Main.astro";
import { siteMetadata } from "../siteMetadata";
---

<Main title={`${siteMetadata.title} → home`} last_modified="1734771487"/>

```

`/workspaces/danieledagnelli.github.io/src/pages/blog.astro`:

```astro
---
import Main from "../layouts/Main.astro";
import { siteMetadata } from "../siteMetadata";
---

<Main title={`${siteMetadata.title} → Blog`} last_modified="1734771487"></Main>
```

`/workspaces/danieledagnelli.github.io/src/siteMetadata.js`:

```js
// src/siteMetadata.ts
export const siteMetadata = {
  title: "daniele d'agnelli",
  description: 'old school',
  name: "Daniele D'Agnelli",
  github_handle: "danieledagnelli",
  bsky_handle: "dagnelli.net",
  linkedin_handle: "dagnelli",
  statusEmoji: "🍕",
  statusMessage: "probably eating pizza",
  bio: "old school",
  location: "London, UK",
  email: "daniele@dagnelli.net",
  website: "https://example.com",
  orgs: [],
  config: {
    matrixEffect: {
      timeout: 1
    }
  }
};
```

`/workspaces/danieledagnelli.github.io/src/layouts/Main.astro`:

```astro
---
import "../styles/global.css";
import "../components/Footer.astro";
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import DynamicContent from "../components/DynamicContent.astro";
import LastChanged from "../components/LastChanged.astro";
import Matrix from "../components/MatrixBeta.astro";
import { siteMetadata } from "../siteMetadata";

type Props = {
    title: string;
    last_modified: string;
};
// const timeout : number = 5000;
const timeout = siteMetadata.config.matrixEffect.timeout;

const { title, last_modified } = Astro.props;
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="Content-Language" content="en" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="generator" content={Astro.generator} />
        <meta name="description" content="al and stuff" />
        <title>{title}</title>
        <link rel="icon" type="image/x-icon" href="favicon.ico" />
    </head>
    <body>
        <Matrix delay={timeout} />

        <main class="content">
            <!-- <slot /> -->
            <Header />
            <Navigation />
            <DynamicContent delay={timeout}>
                <slot />
            </DynamicContent>
            <LastChanged last_modified={`${last_modified}`} />
        </main>
        <Footer />
    </body>
</html>

<style>
    .content {
        flex: 1; /* Allow main content to grow */
        display: flex; /* Use flexbox for child alignment */
        flex-direction: column; /* Stack children vertically */
    }
</style>

```

`/workspaces/danieledagnelli.github.io/src/layouts/About.astro`:

```astro
---
import Main from "../layouts/Main.astro";
import { siteMetadata } from "../siteMetadata";
import type { MarkdownLayoutProps } from "astro";

type Props = MarkdownLayoutProps<{
    title: string;
    subtitle: string;
    created: string;
    last_modified: string;
    author: string;
}>;

const { title, subtitle, created, last_modified, author } =
    Astro.props.frontmatter;
---

<Main
    title={`${siteMetadata.title} → ${title}`}
    last_modified={`${last_modified}`}
>
    <h3>
        {subtitle}
    </h3>
    <div>
        <slot />
    </div>
    <style>
        h3 {
            font-size: inherit;
            font-weight: inherit;
            margin-bottom: 0.1em;
        }
        h3::before {
            content: ":";
        }

        div {
            margin-top: 0em;
            padding-left: 1em;
        }
    </style>
</Main>

```

`/workspaces/danieledagnelli.github.io/src/layouts/Blog.astro`:

```astro
<!-- ---
import Main from "./Main.astro";
import { siteMetadata } from "../siteMetadata";

---
<Main title={`${siteMetadata.title} → blog`} last_modified="aaa">
    <slot />
</Main> -->

```

`/workspaces/danieledagnelli.github.io/src/components/Navigation.astro`:

```astro
---
// import ThemeToggler from "./ThemeToggler.astro";
---

<nav>
    <ul class="navigation__links">
        <li><a href="/home">Home</a></li>
        <!-- <li><a href="/bio">Bio</a></li>
        <li><a href="/blog">Blog</a></li> -->
        <li><a href="/#">Books</a></li>

        <li><a href="/contact">Contact</a></li>

        <!-- <li><a href="/resume">resume</a></li> -->
    </ul>
</nav>

<style>
    nav {
        display: flex;
        justify-content: center; /* Center the navigation links */
        align-items: center; /* Align items vertically */
    }

    .navigation__links {
        display: flex;
        flex-wrap: wrap; /* Allow wrapping to a new row if there isn’t enough space */
        justify-content: center; /* Center-align wrapped items */
        gap: 0.5em; /* Add spacing between items */
        padding: 0;
        margin: 0 auto;
    }

    .navigation__links li {
        list-style: none; /* Remove bullets */
    }

    .navigation__links a {
        text-decoration: none;
        color: inherit;
        padding: 0.5rem 1rem;
        display: inline-block; /* Ensure proper spacing and wrapping */
    }

    .navigation__links a:hover {
        color: white;
    }

    .navigation__links a::after {
        content: " →";
    }

    .navigation__links a::before {
        content: "[ ] ";
    }

    .navigation__links a.active::before {
        content: "[x] ";
    }

    .navigation__links a.active::after {
        content: "\00A0\00A0";
    }

    .navigation__links a.active:hover {
        color: inherit;
        cursor: default;
    }

    @media (max-width: 768px) {
        .navigation__links {
            gap: 0.3em; /* Slightly smaller gap on mobile */
        }

        .navigation__links a {
            padding: 0.5rem 0.8rem; /* Reduce padding for smaller screens */
        }
    }
</style>
<script>
    const normalizePath = (path: string): string => path.replace(/\/$/, ""); // Define 'path' as a string

    const { pathname } = window.location;

    const activeNavigationElement = document.querySelector<HTMLAnchorElement>(
        `nav a[href="${normalizePath(pathname)}"]`,
    );

    if (activeNavigationElement) {
        activeNavigationElement.classList.add("active");
        activeNavigationElement.removeAttribute("href"); // Remove the href attribute
    }
</script>

```

`/workspaces/danieledagnelli.github.io/src/components/LastChanged.astro`:

```astro
---
type Props = {
    last_modified: string;
};

const { last_modified } = Astro.props;

const timeSince = (dateString: string): string => {
    let date: Date;

    // Check if the input is a valid Unix timestamp
    if (/^\d+$/.test(dateString)) {
        const timestamp = parseInt(dateString, 10);
        date = new Date(timestamp * 1000); // Convert seconds to milliseconds
    } else {
        date = new Date(dateString);
    }

    if (isNaN(date.getTime())) {
        console.error(`Invalid date string: "${dateString}"`);
        return "Invalid date";
    }

    const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);

    const intervals = [
        { label: "year", seconds: 31536000 },
        { label: "month", seconds: 2592000 },
        { label: "week", seconds: 604800 },
        { label: "day", seconds: 86400 },
        { label: "hour", seconds: 3600 },
        { label: "minute", seconds: 60 }
    ];

    const interval = intervals.find(i => seconds >= i.seconds);
    if (interval) {
        const count = Math.floor(seconds / interval.seconds);
        return `${count} ${interval.label}${count > 1 ? "s" : ""} ago`;
    }
    return "just now";
};


const formatDateWithTimezone = (dateString: string): string => {
    let date: Date;

    // Check if the input is a valid Unix timestamp
    if (/^\d+$/.test(dateString)) {
        const timestamp = parseInt(dateString, 10);
        date = new Date(timestamp * 1000); // Convert seconds to milliseconds
    } else {
        date = new Date(dateString);
    }

    if (isNaN(date.getTime())) {
        console.error(`Invalid date string: "${dateString}"`);
        return "Invalid date";
    }

    return new Intl.DateTimeFormat("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        timeZoneName: "short"
    }).format(date);
};

---

<div>
    <p class="last__changed" title={last_modified ? formatDateWithTimezone(last_modified) : "Unknown"}>
        Last changed: {last_modified ? timeSince(last_modified) : "Unknown"} 
</div>

<style>
    div {
        text-align: right;
        margin: 1em;
    }
    .last__changed {
        font-size: smaller;
        cursor: default;
    }
</style>

```

`/workspaces/danieledagnelli.github.io/src/components/MatrixBeta.astro`:

```astro
---
type Props = {
    delay: number;
};
const { delay } = Astro.props;
---

<style>
    body,
    html {
        margin: 0;
        padding: 0;
        height: 100%; /* Full height */
        background: var(--background);
    }

    .matrix-effect {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 2;
        pointer-events: none;
        overflow: hidden; /* Prevents scrolling within the effect container */
    }
</style>

<div id="matrixEffect" class="matrix-effect" fade-out={delay}></div>
<script>
    (() => {
        "use strict"; 

        /**
         * Safely read the 'fade-out' attribute from the #matrixEffect element
         * @returns {number} Parsed timeout value (0 if invalid or missing)
         */
        const getTimeoutValue = (element: HTMLElement): number => {
            if (!element) {
                console.warn(
                    "Matrix effect element not found to read 'fade-out' attribute.",
                );
                return 0;
            }

            const fadeOutAttr = element.getAttribute("fade-out");
            if (!fadeOutAttr) {
                console.warn(
                    "'fade-out' attribute not found on #matrixEffect element.",
                );
                return 0;
            }

            const parsed = parseInt(fadeOutAttr, 10);
            if (isNaN(parsed)) {
                console.warn(
                    `Invalid 'fade-out' attribute value: ${fadeOutAttr}`,
                );
                return 0;
            }
            return parsed;
        };

        /**
         * Creates a canvas element inside the given parent and returns the context.
         * @returns {{ canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D | null} | null}
         */
        const createCanvasAndContext = (parent: HTMLElement) => {
            if (!parent) {
                console.warn(
                    "Parent element is null or undefined. Cannot create canvas.",
                );
                return null;
            }

            const canvas = document.createElement("canvas");
            parent.appendChild(canvas);
            const ctx = canvas.getContext("2d");

            if (!ctx) {
                console.warn(
                    "Unable to get 2D context from the created canvas.",
                );
            }
            return { canvas, ctx };
        };

        /**
         * Draws the falling characters.
         */
        const drawMatrix = (
            ctx: CanvasRenderingContext2D,
            canvas: HTMLCanvasElement,
            columns: number,
            drops: number[],
            fontSize: number,
            matrixChars: string[],
        ) => {
            ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = "#0F0";
            ctx.font = `${fontSize}px monospace`;
            for (let i = 0; i < columns; i++) {
                const text =
                    matrixChars[
                        Math.floor(Math.random() * matrixChars.length)
                    ];
                ctx.fillText(text, i * fontSize, drops[i] * fontSize);
                if (
                    drops[i] * fontSize > canvas.height &&
                    Math.random() > 0.975
                ) {
                    drops[i] = 0;
                } else {
                    drops[i]++;
                }
            }
        };

        /**
         * Adds a random horizontal "distortion" line.
         */
        const addDistortionLine = (
            ctx: CanvasRenderingContext2D,
            canvas: HTMLCanvasElement,
        ) => {
            ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
            const yPosition = Math.floor(Math.random() * canvas.height);
            const lineThickness = Math.random() * 10 + 1;
            ctx.fillRect(0, yPosition, canvas.width, lineThickness);
        };

        /**
         * Handles the "blink" and fade-out effect at the end.
         */
        const handleFadeOut = (
            element: HTMLElement,
            timeout: number | undefined,
            addLinesFn: () => void,
        ) => {
            if (!element || (timeout !== undefined && timeout <= 0)) {
                return;
            }
            setTimeout(() => {
                const blinkInterval = setInterval(() => {
                    element.style.opacity =
                        element.style.opacity === "1" ? "0.1" : "1";
                }, 30);

                const extraLinesInterval = setInterval(() => {
                    for (let i = 0; i < 5; i++) {
                        addLinesFn();
                    }
                }, 40);

                setTimeout(() => {
                    clearInterval(blinkInterval);
                    clearInterval(extraLinesInterval);
                    element.style.opacity = "1";
                    element.style.display = "none";
                }, (timeout || 0) / 10);
            }, (timeout || 0) - (timeout || 0) / 10);

            setTimeout(() => {
                element.style.display = "none";
            }, timeout);
        };

        /**
         * Initializes the Matrix effect (creates canvas, sets up intervals).
         */
        const initMatrixEffect = () => {
            const matrixEffectElement = document.getElementById("matrixEffect");
            if (!matrixEffectElement) {
                console.warn(
                    "#matrixEffect element not found in the DOM. Skipping Matrix effect initialization.",
                );
                return;
            }

            const timeout = getTimeoutValue(matrixEffectElement);
            const result = createCanvasAndContext(matrixEffectElement);
            if (!result || !result.canvas || !result.ctx) {
                return;
            }

            const { canvas, ctx } = result;
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;

            const fontSize = 16;
            const columns = Math.floor(canvas.width / fontSize);
            const drops = new Array(columns)
                .fill(0)
                .map(() =>
                    Math.floor((Math.random() * -canvas.height) / fontSize),
                );

            const matrixChars =
                "ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()+-/<>:;".split(
                    "",
                );

            if (typeof setInterval === "function") {
                setInterval(
                    () => drawMatrix(ctx, canvas, columns, drops, fontSize, matrixChars),
                    50,
                );
                setInterval(
                    () => addDistortionLine(ctx, canvas),
                    200,
                );
            } else {
                console.warn(
                    "setInterval is not available. Animations cannot be started.",
                );
            }
            handleFadeOut(matrixEffectElement, timeout || 0, () =>
                addDistortionLine(ctx, canvas),
            );
        };

        /**
         * Main entry point when DOM is loaded.
         */
        const onDomContentLoaded = () => {
            if (typeof document === "undefined") {
                console.warn(
                    "document is not available, cannot initialize Matrix effect.",
                );
                return;
            }
            initMatrixEffect();
        };

        if (typeof document !== "undefined") {
            document.addEventListener("DOMContentLoaded", onDomContentLoaded);
        } else {
            console.warn(
                "document is not defined. Skipping DOMContentLoaded listener.",
            );
        }
    })();
</script>
```

`/workspaces/danieledagnelli.github.io/src/components/ContactSidebar.astro`:

```astro
---
import { siteMetadata } from "../siteMetadata";

/**
 * 3. Data loading (placeholder)
 *    - If you want to fetch data at build time or do something server-side,
 *      you could do that here, e.g.:
 */
// const response = await fetch('https://some-api.com/profile');
// const data = await response.json();

/**
 * 4. Grab Astro.props if you need them
 *    - Astro automatically provides your props in `Astro.props`.
 *      If using TypeScript, it’ll match the interface you defined.
 */
const {
  name,
  github_handle,
  bsky_handle,
  linkedin_handle,
  bio,
  location,
  email,
} = siteMetadata;
---

<div class="container">
  <aside class="sidebar">
    <div class="avatar-wrapper">
      <!-- Example static placeholder avatar -->
      <img src="/assets/dani.jpeg" alt={name + " avatar"} />
    </div>

    <!-- <div class="username">
      <h1>{name}</h1>
      <div class="nickname">@{nickname}</div>
    </div> -->

    <!-- <div class="status">
      <div class="status-emoji">{statusEmoji}</div>
      <div>{statusMessage}</div>
    </div> -->

    <!-- <div class="bio">
      {bio}
    </div> -->

    <ul class="details-list">
      <li class="location">
        <!-- Location icon -->
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
          <path
            d="M8 0a6 6 0 0 0-6 6c0 3.313 6 10 6 10s6-6.687 6-10a6 6 0 0 0-6-6zm0 8a2 2 0 1 1 0-4 2 2 0 0 1 0 4z"
          ></path>
        </svg>
        <span>{location}</span>
      </li>
      <li>
        <!-- Email icon -->
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
          <path
            d="M1.75 2h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0 1 14.25 14H1.75A1.75 1.75 0 0 1 0 12.25v-8.5C0 2.784.784 2 1.75 2ZM1.5 12.251c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V5.809L8.38 9.397a.75.75 0 0 1-.76 0L1.5 5.809v6.442Zm13-8.181v-.32a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25v.32L8 7.88Z"
          ></path>
        </svg>
        <!-- Notice: added id="emailLink" -->
        <a id="emailLink" href={`mailto:${email}`}>{email}</a>
      </li>
      <!-- <li>
        <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
          <path
            d="M7.775 3.275 9.025 2.025a3.5 3.5 0 0 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .75.75 0 0 1 1.06-1.06 2 2 0 0 0 2.83 0l2.5-2.5a2 2 0 0 0-2.83-2.83l-1.25 1.25a.75.75 0 1 1-1.06-1.06zm-4.69 9.64a2 2 0 0 0 2.83 0l1.25-1.25a.75.75 0 0 1 1.06 1.06l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .75.75 0 0 1-1.06 1.06 2 2 0 0 0-2.83 0l-2.5 2.5a2 2 0 0 0 0 2.83z"
          />
        </svg>
        <a href={website} target="_blank" rel="noopener noreferrer">{website}</a>
      </li> -->
    </ul>
    <!-- Social links list -->
    <ul class="details-list">
      <!-- GitHub -->
      <li>
        <!-- GitHub icon -->
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="none"
          role="img"
          style="margin-right: 0.5rem"
          viewBox="0 0 16 16"
        >
          <title>GitHub</title>
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-1.79.33-2.23-.44-2.37-.85-.09-.23-.48-.85-.82-1.02-.28-.15-.68-.52 0-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.67.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.58.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.22 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.57.82 1.28.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.14.45.55.38A8.014 8.014 0 0016 8c0-4.42-3.58-8-8-8z"
            fill="currentColor"></path>
        </svg>
        <a
          rel="nofollow me"
          href={`https://github.com/${github_handle}`}
          target="_blank"
        >
          {github_handle}
        </a>
      </li>
      <!-- Bluesky -->
      <li>
        <!-- Bluesky icon -->
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 16 16"
          role="img"
          width="16"
          height="16"
          style="margin-right: 0.5rem"
        >
          <title>Bluesky</title>
          <path
            fill="currentColor"
            d="M3.468 1.948C5.303 3.325 7.276 6.118 8 7.616c.725-1.498 2.697-4.29 4.532-5.668C13.855.955 16 .186 16 2.632c0 .489-.28 4.105-.444 4.692-.572 2.04-2.653 2.561-4.504 2.246 3.236.551 4.06 2.375 2.281 4.2-3.376 3.464-4.852-.87-5.23-1.98-.07-.204-.103-.3-.103-.218 0-.081-.033.014-.102.218-.379 1.11-1.855 5.444-5.231 1.98-1.778-1.825-.955-3.65 2.28-4.2-1.85.315-3.932-.205-4.503-2.246C.28 6.737 0 3.12 0 2.632 0 .186 2.145.955 3.468 1.948Z"
          ></path>
        </svg>
        <a
          rel="nofollow me"
          href={`https://bsky.app/profile/${bsky_handle}`}
          target="_blank"
        >
          @{bsky_handle}
        </a>
      </li>

      <!-- LinkedIn -->
      <li>
        <!-- LinkedIn icon -->
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="none"
          role="img"
          style="margin-right: 0.5rem"
          viewBox="0 0 16 16"
        >
          <title>LinkedIn</title>
          <g clip-path="url(#clip0)">
            <path
              fill="currentColor"
              d="M14.5455 0H1.45455C.650909 0 0 .650909 0 1.45455V14.5455C0 15.3491.650909 16 1.45455 16H14.5455C15.3491 16 16 15.3491 16 14.5455V1.45455C16 .650909 15.3491 0 14.5455 0zM5.05746 13.0909H2.912V6.18764h2.14546v6.90326zM3.96291 5.20073c-.69164 0-1.25091-.56073-1.25091-1.25091 0-.69018.56073-1.25091 1.25091-1.25091.69091 0 1.25164.56073 1.25164 1.25091 0 .69018-.56073 1.25091-1.25164 1.25091zM13.0938 13.0909h-2.144v-3.3571c0-.80073-.0145-1.83055-1.1149-1.83055-1.11536 0-1.28699.872-1.28699 1.77236v3.41529h-2.144v-6.90326h2.05809v.94327h.02909c.28563-.54255.98327-1.11545 2.02409-1.11545 2.164 0 2.5622 1.42545 2.5622 3.27891v3.79608z"
            ></path>
          </g>
          <defs>
            <clipPath id="clip0">
              <path fill="currentColor" d="M0 0h16v16H0z"></path>
            </clipPath>
          </defs>
        </svg>
        <a
          rel="nofollow me"
          href={`https://www.linkedin.com/in/${linkedin_handle}`}
          target="_blank"
        >
          in/{linkedin_handle}
        </a>
      </li>

      <!-- Twitter/X -->
      <li>
        <!-- “X” icon (formerly Twitter) -->
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 16 16"
          width="16"
          height="16"
          role="img"
          style="margin-right: 0.5rem"
        >
          <title>X (Twitter)</title>
          <path
            fill="currentColor"
            d="M9.332 6.925 14.544 1h-1.235L8.783 6.145 5.17 1H1l5.466 7.78L1 14.993h1.235l4.78-5.433 3.816 5.433H15L9.332 6.925zM7.64 8.848l-.554-.775L2.68 1.91h1.897l3.556 4.975.554.775 4.622 6.466H13.35L7.64 8.848z"
          ></path>
        </svg>
        <a
          rel="nofollow me"
          href="https://twitter.com/danieledagnelli"
          target="_blank"
        >
          @danieledagnelli
        </a>
      </li>
    </ul>

    <!-- <div class="orgs">
      <h2>Organizations</h2>
      <div class="org-list">
        {orgs.map((orgUrl) => (
          <img src={orgUrl} alt="Organization logo" />
        ))}
      </div>
    </div> -->
  </aside>
</div>

<style>
  .container {
    display: flex;
    justify-content: left;
    align-items: stretch; /* Ensures the sidebar expands vertically */
    height: 100vh; /* Full viewport height */
  }

  .sidebar {
    padding: 1em 1em 1em 1em;
    width: 250px; /* Adjust to your desired width */
    box-shadow: var(--text-color); /* Container background color */
    border: 1px solid var(--text-color);
    margin-top: 1em;
  }

  .avatar-wrapper {
    display: flex;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .avatar-wrapper img {
    border-radius: 50%;
    width: 140px;
    height: 140px;
    object-fit: cover;
  }

  .username {
    text-align: center;
    margin-bottom: 0.5rem;
  }

  .username h1 {
    font-size: 1.25rem;
    margin: 0.25rem 0;
  }

  .username .nickname {
    color: var(--link-color);
    font-size: 0.95rem;
  }

  .status {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1rem;
  }

  .status-emoji {
    margin-right: 0.5rem;
  }

  .bio {
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  .details-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .details-list li svg {
    flex-shrink: 0; /* Prevent the icon from resizing */
    width: 16px; /* Standardize the width of all icons */
    height: 16px; /* Standardize the height */
    margin-right: 0.5rem; /* Space between the icon and text */
    display: inline-block; /* Ensure it's treated as a block element for alignment */
  }

  .details-list li {
    display: flex; /* Align icon and text horizontally */
    align-items: center; /* Vertically center-align the icon and text */
    margin-bottom: 1rem; /* or 2rem, etc. */
  }
  .details-list a {
    text-decoration: none;
    color: inherit;
    flex: 1;
    padding: 0;
    transition: color 0.3s ease; /* optional smooth transition */
  }

  .details-list li a:hover {
    color: white;
  }

  /* In ContactSidebar.astro, inside <style> */
  .details-list li a {
    text-decoration: none;
    color: inherit;
    flex: 1;
    padding: 0; /* overrides global padding */
  }

  .orgs {
    margin-top: 1rem;
  }

  .orgs h2 {
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
    text-decoration: underline;
  }

  .orgs .org-list {
    display: flex;
    gap: 0.5rem;
  }

  .org-list img {
    width: 32px;
    height: 32px;
    border-radius: 50%;
  }
  .location {
    display: block; /* Make the span behave like a block */
    text-align: center; /* Center its contents horizontally */
    float: center;
  }
</style>

<script>
  // Reuse a typewriter-like function (similar to your Whoami.astro)
  function typeWriter(element: Element | null | undefined, text: string, callback: { (): void; (): void; }) {
    const speed = 60; // ms per character
    let index = 0;
    const cursor = element?.nextElementSibling;

    function type() {
      if (index < text.length && element) {
        element.textContent += text.charAt(index);
        index++;
        setTimeout(type, speed);
      } else {
        // remove the blinking cursor once completed
        if (cursor && cursor.classList.contains("cursor")) {
          cursor.remove();
        }
        callback();
      }
    }

    type();
  }

  const emailLink = document.getElementById("emailLink");
  const typedCommandContainer = document.getElementById("typedCommand");
  const typedOutput = typedCommandContainer?.querySelector(".typed-output");

  if (emailLink) {
    emailLink.addEventListener("click", (event) => {
      event.preventDefault(); // Stop the normal mailto: navigation

      // Make the typedCommand container visible
      if (typedCommandContainer) {
        typedCommandContainer.style.display = "block";
      }

      // Clear old content if any
      if (typedOutput) {
        typedOutput.textContent = "";
      }

      // Prepare our fake command
      const command = `mail -s "Hello" ${emailLink.textContent}`;

      // Start typing
      typeWriter(typedOutput, command, () => {
        // After typing finishes, do whatever you want:
        //  - Open the mail client automatically:
        if (emailLink instanceof HTMLAnchorElement) {
          window.location.href = emailLink.href;
        }
        
        //  - or just do nothing, so the user can read it
      });
    });
  }
</script>

```

`/workspaces/danieledagnelli.github.io/src/components/Footer.astro`:

```astro
---
import { siteMetadata } from '../siteMetadata';
---

<footer class="foot">&copy; 2025 {siteMetadata.title}</footer>

<style>
    body {
        display: flex;
        flex-direction: column;
        min-height: 100vh; /* Ensure the body takes the full height of the viewport */
        margin: 0;
    }

    .foot {
        text-align: center;
        margin: 1em;
        cursor: default;
    }
</style>

```

`/workspaces/danieledagnelli.github.io/src/components/Header.astro`:

```astro
---
import { siteMetadata } from "../siteMetadata";
---

<div class="theme-toggler-container">
    <h1><a href="/">{siteMetadata.title}</a></h1>
    <!-- <ThemeToggler /> -->
</div>
<style>
    .theme-toggler-container {
        margin-right: 1em;
    }
</style>

```

`/workspaces/danieledagnelli.github.io/src/components/DynamicContent.astro`:

```astro
---
import Loading from "./Loading.astro";

// Calculate the delay on the server side
type Props = {
    delay: number;
};
const { delay } = Astro.props;
---

<div id="dynamicContent" class="dynamic__content" data-delay={delay}>
    <div id="loadingComponent" class="loading-center">
        <Loading delay={delay} />
    </div>
    <div id="slotComponent" style="display: none;">
        <slot />
    </div>
</div>

<style>
    .dynamic__content {
        border: 0.01em solid #37ff142a;
        margin: 1em;
        padding: 0.5em;
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: top;
        position: relative; /* For absolute positioning of children */
        text-align: left;
        overflow: hidden; /* Prevent children from overflowing borders */
    }

    /* Center the loading component */
    .loading-center {
        display: flex;
        justify-content: center;
        align-items: center;
        position: absolute; /* Keep centered without stretching over borders */
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        padding: inherit; /* Ensure inner padding matches outer container */
        pointer-events: none; /* Allow clicks to pass through to other components */
    }

    #slotComponent {
        width: 100%;
        text-align: left; /* Ensure text starts from the top left */
        display: flex;
        flex-direction: column;
    }
</style>

<script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
        // Get the delay value from the data attribute
        const dynamicContent = document.getElementById("dynamicContent");
        const delay = parseInt(dynamicContent.getAttribute("data-delay"), 10);

        const loadingComponent = document.getElementById("loadingComponent");
        const slotComponent = document.getElementById("slotComponent");

        setTimeout(() => {
            if (loadingComponent) {
                loadingComponent.style.display = "none";
            }
            if (slotComponent) {
                slotComponent.style.display = "block";
            }
        }, delay);
    });
</script>

```

`/workspaces/danieledagnelli.github.io/src/components/ThemeToggler.astro`:

```astro
<button aria-label="Switch Mode" class="switch-mode-button">
    <div class="image-container">
        <img src="/assets/businessgreen.png" alt="Business Mode" class="switch-mode-image" />
        <img src="/assets/pirateblack.png" alt="Hacker Mode" class="switch-mode-image" />
    </div>
</button>

<style>
.switch-mode-button {
    position: relative; /* Establishes a containing block for absolute positioning */
    width: 20px; /* Set button width */
    height: 20px; /* Set button height */
    padding: 0; /* Remove default padding */
    border: 0.01em solid #39ff14; /* Add border with specified color */
    background: linear-gradient(to bottom, #39ff14, #2ecc71); /* Gradient for 3D look */
    cursor: pointer; /* Add pointer cursor */
    overflow: hidden; /* Ensure content doesn't overflow the button */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2), 0 4px 8px rgba(0, 0, 0, 0.15); /* Shadow for depth */
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out; Smooth hover effect
}

.switch-mode-button:active {
    /* transform: translate(1px, 1px);  */
    transform: scale(0);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); /* Reduce shadow for pressed effect */
}

.image-container {
    position: relative; /* Container for stacking images */
    width: 100%; /* Match the button's width */
    height: 100%; /* Match the button's height */
    pointer: cursor; /* Add pointer cursor */
}

.switch-mode-image {
    position: absolute; /* Stack images on top of each other */
    top: 0;
    left: 0;
    width: 100%; /* Fit within the container's width */
    height: 100%; /* Fit within the container's height */
    object-fit: contain; /* Ensure proportional scaling */
}

.switch-mode-image:nth-child(2) {
    opacity: 0;
}

</style>

```

`/workspaces/danieledagnelli.github.io/src/components/Whoami.astro`:

```astro
---
import { siteMetadata } from "../siteMetadata";

// Get the base timeout value from site metadata
const timeout = siteMetadata.config.matrixEffect.timeout;
---

<div class="whoami">
    <div
        class="command-content-pair"
        data-command="whoami"
        data-delay={timeout + 1000}
    >
        <p>
            daniele@dagnelli.net:~$ <span class="typewriter"></span><span
                class="cursor">|</span>
        </p>
        <p class="content" style="display: none;">
            I grew up and studied in the south of Italy. Since then, many other
            things have happened. I will write about them when I get the chance.
        </p>
    </div>

    <div
        class="command-content-pair"
        data-command=""
        data-delay={timeout + 500}
        style="display: none;"
    >
        <p>
            daniele@dagnelli.net:~$ <span class="typewriter"></span><span
                class="cursor">|</span>
        </p>
        <p class="content" style="display: none;"></p>
    </div>

    <div id="typedCommand" style="display: none;">
        <p>
            daniele@dagnelli.net:~$ <span class="typed-output"></span><span
                class="cursor">|</span
            >
        </p>
    </div>
</div>

<style>
    .whoami {
        flex: 1;
        padding: 1em;
        margin-top: 1em;
        margin-left: 20px;
        background-color: var(--background-secondary);
        border: 1px solid var(--text-color);
        box-shadow: var(--text-color);
    }

    .cursor {
        display: inline-block;
        width: 10px;
        background-color: var(--text-color);
        animation: blink 1s steps(2, start) infinite;
    }

    .content {
        margin-top: 0.5em;
    }

    @keyframes blink {
        0%,
        100% {
            opacity: 1;
        }
        50% {
            opacity: 0;
        }
    }
</style>

<script>
    const speed = 100; // Typing speed in milliseconds
    let pairIndex = 0;

    function typeWriter(
        element: Element | null,
        text: string | null,
        callback: { (): void; (): void },
    ) {
        let index = 0;
        const cursor = element ? element.nextElementSibling : null;

        function type() {
            if (text && index < text.length) {
                if (element) {
                    element.innerHTML += text.charAt(index);
                }
                index++;
                setTimeout(type, speed);
            } else {
                if (cursor && cursor.classList.contains("cursor")) {
                    cursor.remove();
                }
                callback(); // Call the callback after typing finishes
            }
        }

        type();
    }

    function processNextPair() {
        const pairs = document.querySelectorAll(".command-content-pair");
        if (pairIndex < pairs.length) {
            const pair = pairs[pairIndex];
            const command = pair.getAttribute("data-command");
            const delay = parseInt(pair.getAttribute("data-delay") ?? "0") || 0; // Get delay, default to 0 if not specified
            const typewriterElement = pair.querySelector(".typewriter");
            const contentElement = pair.querySelector(".content");

            // Apply delay before starting the typing effect
            setTimeout(() => {
                typeWriter(typewriterElement, command, () => {
                    if (contentElement) {
                        (contentElement as HTMLElement).style.display = "block"; // Show content after typing finishes
                    }
                    pairIndex++; // Move to the next pair

                    // Reveal the next command-content pair
                    if (pairIndex < pairs.length) {
                        (pairs[pairIndex] as HTMLElement).style.display =
                            "block";
                    }

                    processNextPair(); // Process the next pair
                });
            }, delay);
        }
    }

    // Start the sequential typing process when the page loads
    window.addEventListener("load", processNextPair);
</script>

```

`/workspaces/danieledagnelli.github.io/src/components/Loading.astro`:

```astro
---
type Props = {
    delay: number;
};
const { delay } = Astro.props;
---

<div class="loading-box" data-delay={delay}>
    Loading
    <span class="dot">.</span>
    <span class="dot">.</span>
    <span class="dot">.</span>
    <span class="counter">0 ms</span>
</div>

<script>
    const loadingBox = document.querySelector(".loading-box") as HTMLElement;
    const totalDelay = Number(loadingBox.dataset.delay);
    const interval = totalDelay / 4;
    const dots = document.querySelectorAll(".dot");

    function randomInterval(min: number, max: number) {
        return Math.random() * (max - min) + min;
    }

    dots.forEach((dot, index) => {
        setTimeout(
            () => {
                const blink = () => {
                    (dot as HTMLElement).style.opacity =
                        (dot as HTMLElement).style.opacity === "1" ? "0" : "1";
                    setTimeout(blink, randomInterval(50, 300)); // Random blink interval between 50ms and 300ms
                };
                blink();
                setTimeout(() => {
                    (dot as HTMLElement).style.opacity = "1"; // Ensure dot is visible at the end
                }, totalDelay);
            },
            interval * (index + 1),
        );
    });

    // Counter for milliseconds
    const counter = document.querySelector(".counter") as HTMLElement;
    let ms = 0;
    const msInterval = setInterval(() => {
        ms++;
        counter.textContent = `${ms} ms`;
        if (ms >= totalDelay) {
            clearInterval(msInterval);
        }
    }, 1);
</script>

<style>
    .loading-box {
        border: 0.1em solid #39ff14;
        background-color: black;
        background-opacity: 1;
        padding: 1em;
        text-align: center;
        position: relative; /* Needed for absolute positioning of the counter */
        animation: flicker 1s linear infinite;
        z-index: 99999;
    }

    @keyframes flicker {
        0%,
        19%,
        21%,
        23%,
        25%,
        54%,
        56%,
        100% {
            opacity: 1;
        }
        20%,
        24%,
        55% {
            opacity: 0;
        }
        22% {
            opacity: 0.5;
        }
    }

    .dot {
        opacity: 0;
        transition: opacity 0.2s ease-in-out;
    }

    .counter {
        position: absolute;
        bottom: 0.2em;
        right: 0.2em;
        font-size: 0.5em; /* Even smaller font size for the counter */
    }
</style>

```

`/workspaces/danieledagnelli.github.io/src/styles/global.css`:

```css
html {
    --background: #101010;
    --text-color: #39ff14;
    --text-transformation: lowercase;
    --font: 0.9rem "Courier New", Courier, monospace;
    --link-color: white;

}

/* html.business {
    --background: white;
    --text-color: #101010;
    --text-transformation: lowercase;
    --font: font: "Roboto", sans-serif;
    --link-color: blue;
} */

body {
    background-color: var(--background);
    text-transform: var(--text-transformation);
    color: var(--text-color);
    /* font-family: "Courier New", Courier, monospace; */
    font: var(--font);

    margin: 0;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    /* Ensure full height of the viewport */
}

main {
    text-align: center;
    font-weight: normal;
    margin: 0;
    padding: 0;
    box-sizing: border-box;

}

h1 {
    font-size: inherit;
    font-weight: inherit;
    /* Remove bold from all elements */

}

h2 {
    font-size: inherit;
    font-weight: inherit;
    /* Remove bold from all elements */
}

a {
    text-decoration: none;
    color: inherit;
    padding: 0.5rem 1rem;
}


```
